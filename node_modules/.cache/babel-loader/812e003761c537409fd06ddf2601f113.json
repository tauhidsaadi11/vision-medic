{"ast":null,"code":"import{EventEmitter}from\"events\";import Dispatcher from\"./dispatcher\";import Constants from\"./constants\";import getSidebarNavItems from\"../data/sidebar-nav-items\";var _store={menuVisible:false,navItems:getSidebarNavItems()};class Store extends EventEmitter{constructor(){super();this.registerToActions=this.registerToActions.bind(this);this.toggleSidebar=this.toggleSidebar.bind(this);Dispatcher.register(this.registerToActions.bind(this));}registerToActions({actionType,payload}){switch(actionType){case Constants.TOGGLE_SIDEBAR:this.toggleSidebar();break;default:}}toggleSidebar(){_store.menuVisible=!_store.menuVisible;this.emit(Constants.CHANGE);}getMenuState(){return _store.menuVisible;}getSidebarItems(){return _store.navItems;}addChangeListener(callback){this.on(Constants.CHANGE,callback);}removeChangeListener(callback){this.removeListener(Constants.CHANGE,callback);}}export default new Store();","map":{"version":3,"sources":["/Volumes/Workspace/Software-Development/Website-Development/ReactJS/vision-medic/src/flux/store.js"],"names":["EventEmitter","Dispatcher","Constants","getSidebarNavItems","_store","menuVisible","navItems","Store","constructor","registerToActions","bind","toggleSidebar","register","actionType","payload","TOGGLE_SIDEBAR","emit","CHANGE","getMenuState","getSidebarItems","addChangeListener","callback","on","removeChangeListener","removeListener"],"mappings":"AAAA,OAASA,YAAT,KAA6B,QAA7B,CAEA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,2BAA/B,CAEA,GAAIC,CAAAA,MAAM,CAAG,CACXC,WAAW,CAAE,KADF,CAEXC,QAAQ,CAAEH,kBAAkB,EAFjB,CAAb,CAKA,KAAMI,CAAAA,KAAN,QAAoBP,CAAAA,YAAa,CAC/BQ,WAAW,EAAG,CACZ,QAEA,KAAKC,iBAAL,CAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB,CACA,KAAKC,aAAL,CAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB,CAEAT,UAAU,CAACW,QAAX,CAAoB,KAAKH,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAApB,EACD,CAEDD,iBAAiB,CAAC,CAAEI,UAAF,CAAcC,OAAd,CAAD,CAA0B,CACzC,OAAQD,UAAR,EACE,IAAKX,CAAAA,SAAS,CAACa,cAAf,CACE,KAAKJ,aAAL,GACA,MACF,QAJF,CAMD,CAEDA,aAAa,EAAG,CACdP,MAAM,CAACC,WAAP,CAAqB,CAACD,MAAM,CAACC,WAA7B,CACA,KAAKW,IAAL,CAAUd,SAAS,CAACe,MAApB,EACD,CAEDC,YAAY,EAAG,CACb,MAAOd,CAAAA,MAAM,CAACC,WAAd,CACD,CAEDc,eAAe,EAAG,CAChB,MAAOf,CAAAA,MAAM,CAACE,QAAd,CACD,CAEDc,iBAAiB,CAACC,QAAD,CAAW,CAC1B,KAAKC,EAAL,CAAQpB,SAAS,CAACe,MAAlB,CAA0BI,QAA1B,EACD,CAEDE,oBAAoB,CAACF,QAAD,CAAW,CAC7B,KAAKG,cAAL,CAAoBtB,SAAS,CAACe,MAA9B,CAAsCI,QAAtC,EACD,CAtC8B,CAyCjC,cAAe,IAAId,CAAAA,KAAJ,EAAf","sourcesContent":["import { EventEmitter } from \"events\";\r\n\r\nimport Dispatcher from \"./dispatcher\";\r\nimport Constants from \"./constants\";\r\nimport getSidebarNavItems from \"../data/sidebar-nav-items\";\r\n\r\nlet _store = {\r\n  menuVisible: false,\r\n  navItems: getSidebarNavItems()\r\n};\r\n\r\nclass Store extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n\r\n    this.registerToActions = this.registerToActions.bind(this);\r\n    this.toggleSidebar = this.toggleSidebar.bind(this);\r\n\r\n    Dispatcher.register(this.registerToActions.bind(this));\r\n  }\r\n\r\n  registerToActions({ actionType, payload }) {\r\n    switch (actionType) {\r\n      case Constants.TOGGLE_SIDEBAR:\r\n        this.toggleSidebar();\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  toggleSidebar() {\r\n    _store.menuVisible = !_store.menuVisible;\r\n    this.emit(Constants.CHANGE);\r\n  }\r\n\r\n  getMenuState() {\r\n    return _store.menuVisible;\r\n  }\r\n\r\n  getSidebarItems() {\r\n    return _store.navItems;\r\n  }\r\n\r\n  addChangeListener(callback) {\r\n    this.on(Constants.CHANGE, callback);\r\n  }\r\n\r\n  removeChangeListener(callback) {\r\n    this.removeListener(Constants.CHANGE, callback);\r\n  }\r\n}\r\n\r\nexport default new Store();\r\n"]},"metadata":{},"sourceType":"module"}